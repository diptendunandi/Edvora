{"ast":null,"code":"export function calcDistance(path, stCode) {\n  let pointer = Math.abs(path[0] - stCode);\n  let length = path.length;\n\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      continue;\n    }\n\n    let temp = Math.abs(path[i] - stCode);\n\n    if (temp < pointer) {\n      pointer = temp;\n      continue;\n    }\n\n    break;\n  }\n\n  return pointer;\n}\nexport function sortByNearest(ride, stCode) {\n  return ride.sort((a, b) => {\n    let A = a.station_path;\n    let B = b.station_path;\n    return calcDistance(A, stCode) - calcDistance(B, stCode);\n  });\n}","map":{"version":3,"sources":["E:/react/Edvora-Task-Nearest-Ride-main/src/utils/helpers/helpers.js"],"names":["calcDistance","path","stCode","pointer","Math","abs","length","i","temp","sortByNearest","ride","sort","a","b","A","station_path","B"],"mappings":"AACA,OAAO,SAASA,YAAT,CAAuBC,IAAvB,EAA8BC,MAA9B,EAAuC;AAC1C,MAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAUJ,IAAI,CAAC,CAAD,CAAJ,GAAUC,MAApB,CAAd;AACA,MAAII,MAAM,GAAGL,IAAI,CAACK,MAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAkC;AAE9B,QAAIA,CAAC,KAAK,CAAV,EAAc;AACV;AACH;;AAED,QAAIC,IAAI,GAAGJ,IAAI,CAACC,GAAL,CAAUJ,IAAI,CAACM,CAAD,CAAJ,GAAUL,MAApB,CAAX;;AAEA,QAAIM,IAAI,GAAGL,OAAX,EAAqB;AACjBA,MAAAA,OAAO,GAAGK,IAAV;AACA;AACH;;AAED;AACH;;AAED,SAAOL,OAAP;AACH;AAED,OAAO,SAASM,aAAT,CAAuBC,IAAvB,EAA6BR,MAA7B,EAAqC;AACxC,SAAOQ,IAAI,CAACC,IAAL,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAW;AACzB,QAAIC,CAAC,GAAGF,CAAC,CAACG,YAAV;AACA,QAAIC,CAAC,GAAGH,CAAC,CAACE,YAAV;AAEA,WAAOf,YAAY,CAACc,CAAD,EAAIZ,MAAJ,CAAZ,GAA0BF,YAAY,CAACgB,CAAD,EAAId,MAAJ,CAA7C;AAEH,GANM,CAAP;AAOH","sourcesContent":["\nexport function calcDistance( path , stCode ) {\n    let pointer = Math.abs( path[0] - stCode );\n    let length = path.length;\n\n    for( let i = 0; i < length; i++ ) {\n\n        if( i === 0 ) {\n            continue;\n        }\n\n        let temp = Math.abs( path[i] - stCode );\n\n        if( temp < pointer ) {\n            pointer = temp;\n            continue;\n        }\n\n        break;\n    }\n\n    return pointer;\n}\n\nexport function sortByNearest(ride, stCode) {\n    return ride.sort( (a, b) =>  {\n        let A = a.station_path;\n        let B = b.station_path;\n\n        return calcDistance(A, stCode) - calcDistance(B, stCode);\n\n    })\n}"]},"metadata":{},"sourceType":"module"}