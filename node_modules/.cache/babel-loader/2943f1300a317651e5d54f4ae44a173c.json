{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\Edvora-Task-Nearest-Ride-main\\\\src\\\\Context\\\\Store.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StoreContext = /*#__PURE__*/React.createContext();\nexport const useStore = () => {\n  _s();\n\n  return useContext(StoreContext);\n};\n\n_s(useStore, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction StoreProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState({});\n  const [ride, setRide] = useState([]);\n  const [filters, setFilters] = useState({\n    state: \"\",\n    city: \"\"\n  });\n  const [status, setStatus] = useState(\"\"); // upcoming, past\n  // Fetching Date\n\n  useEffect(() => {\n    (async function () {\n      await fetch('/Data.json').then(response => response.json()).then(res => {\n        setUser(res.user);\n        setRide(res.ride);\n      });\n    })();\n  }, [setUser, setRide]); //////////////////////////////////\n  //////////////////////////////////\n  ////////// Hnadle Rides //////////\n  /////////////////////////////////\n  ////////////////////////////////\n\n  /**\n   * handle up coming rides\n   * //////////////////////\n   * \n   * selecting all up coming rides\n   * apply the Filter by:\n   *  --- state\n   *  --- city\n   */\n\n  function selectUpcomingRides() {\n    const date = new Date();\n    const now = date.getTime();\n    return ride.filter(obj => {\n      const filterState = filters.state ? obj.state === filters.state : !filters.state;\n      const filterCity = filters.city ? obj.city === filters.city : !filters.city;\n      return obj.date * 1000 >= now && filterState && filterCity;\n    });\n  }\n  /**\n  * handle past rides\n  * //////////////////////\n  * \n  * selecting all past rides\n  * apply the Filter by:\n  *  --- state\n  *  --- city\n  */\n\n\n  function selectPastRides() {\n    const date = new Date();\n    const now = date.getTime();\n    return ride.filter(obj => {\n      const filterState = filters.state ? obj.state === filters.state : !filters.state;\n      const filterCity = filters.city ? obj.city === filters.city : !filters.city;\n      return obj.date * 1000 < now && filterState && filterCity;\n    });\n  }\n  /**\n  * handling ( All Rides )\n  * //////////////////////\n  * \n  * Selecting All rides\n  * Apply the Filter by:\n  *  --- state\n  *  --- city\n  */\n\n\n  function selectAllRides() {\n    return ride.filter(obj => {\n      const filterState = filters.state ? obj.state === filters.state : !filters.state;\n      const filterCity = filters.city ? obj.city === filters.city : !filters.city;\n      return filterState && filterCity;\n    });\n  }\n  /**\n   * handling rides\n   * //////////////////////\n   * \n   * return Ride by selected ( status ) // upcoming, past and \"\" ( for all rides )  \n   * Apply the Filter by:\n   *  --- state\n   *  --- city\n   */\n\n\n  const getRides = () => {\n    switch (status) {\n      case \"upcoming\":\n        return selectUpcomingRides();\n\n      case \"past\":\n        return selectPastRides();\n\n      default:\n        return selectAllRides();\n    }\n  };\n  /*\n        /////////////////////////////////////////////////////////////\n        /////////////////////////////////////////////////////////////\n        ////////// handling status State and Filter State //////////\n        /////////////////////////////////////////////////////////////\n        /////////////////////////////////////////////////////////////\n    */\n\n\n  const handleStatus = state => {\n    setStatus(state);\n  };\n\n  const handleFilters = obj => {\n    setFilters(obj);\n  };\n\n  const value = {\n    handleStatus,\n    handleFilters,\n    selectUpcomingRides,\n    selectPastRides,\n    getRides,\n    filters,\n    status,\n    ride,\n    user\n  };\n  return /*#__PURE__*/_jsxDEV(StoreContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(StoreProvider, \"JvtEiJ6GDsl32t0ggmUJai7HpRU=\");\n\n_c = StoreProvider;\nexport default StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["E:/react/Edvora-Task-Nearest-Ride-main/src/Context/Store.js"],"names":["React","useState","useContext","useEffect","StoreContext","createContext","useStore","StoreProvider","children","user","setUser","ride","setRide","filters","setFilters","state","city","status","setStatus","fetch","then","response","json","res","selectUpcomingRides","date","Date","now","getTime","filter","obj","filterState","filterCity","selectPastRides","selectAllRides","getRides","handleStatus","handleFilters","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;;AAEA,MAAMC,YAAY,gBAAGJ,KAAK,CAACK,aAAN,EAArB;AAEA,OAAO,MAAMC,QAAQ,GAAG;AAAA;;AAAA,SAAMJ,UAAU,CAAEE,YAAF,CAAhB;AAAA,CAAjB;;GAAME,Q;;AAIb,SAASC,aAAT,OAAqC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAEjC,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEU,IAAF,EAAQC,OAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEY,OAAF,EAAWC,UAAX,IAA0Bb,QAAQ,CAAC;AAAEc,IAAAA,KAAK,EAAC,EAAR;AAAYC,IAAAA,IAAI,EAAE;AAAlB,GAAD,CAAxC;AACA,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC,CALiC,CAKW;AAG5C;;AACAE,EAAAA,SAAS,CAAC,MAAM;AAEZ,KAAC,kBAAiB;AACd,YAAMgB,KAAK,CAAC,YAAD,CAAL,CACLC,IADK,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAELF,IAFK,CAEAG,GAAG,IAAI;AACTb,QAAAA,OAAO,CAAEa,GAAG,CAACd,IAAN,CAAP;AACAG,QAAAA,OAAO,CAAEW,GAAG,CAACZ,IAAN,CAAP;AAEH,OANK,CAAN;AASH,KAVD;AAaH,GAfQ,EAeN,CAAED,OAAF,EAAWE,OAAX,CAfM,CAAT,CATiC,CA0BjC;AACA;AACA;AACA;AACA;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,WAASY,mBAAT,GAA+B;AAC3B,UAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,GAAG,GAAGF,IAAI,CAACG,OAAL,EAAZ;AAEA,WAAOjB,IAAI,CAACkB,MAAL,CAAaC,GAAG,IAAI;AACvB,YAAMC,WAAW,GAAGlB,OAAO,CAACE,KAAR,GAAgBe,GAAG,CAACf,KAAJ,KAAcF,OAAO,CAACE,KAAtC,GAA8C,CAACF,OAAO,CAACE,KAA3E;AACA,YAAMiB,UAAU,GAAInB,OAAO,CAACG,IAAR,GAAgBc,GAAG,CAACd,IAAJ,KAAaH,OAAO,CAACG,IAArC,GAA4C,CAACH,OAAO,CAACG,IAAzE;AAEA,aAAQc,GAAG,CAACL,IAAJ,GAAW,IAAX,IAAmBE,GAApB,IAA4BI,WAA5B,IAA2CC,UAAlD;AACH,KALM,CAAP;AAMH;AAGA;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASC,eAAT,GAA2B;AACvB,UAAMR,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,GAAG,GAAGF,IAAI,CAACG,OAAL,EAAZ;AAEA,WAAOjB,IAAI,CAACkB,MAAL,CAAaC,GAAG,IAAI;AACvB,YAAMC,WAAW,GAAGlB,OAAO,CAACE,KAAR,GAAgBe,GAAG,CAACf,KAAJ,KAAcF,OAAO,CAACE,KAAtC,GAA8C,CAACF,OAAO,CAACE,KAA3E;AACA,YAAMiB,UAAU,GAAInB,OAAO,CAACG,IAAR,GAAgBc,GAAG,CAACd,IAAJ,KAAaH,OAAO,CAACG,IAArC,GAA4C,CAACH,OAAO,CAACG,IAAzE;AAEA,aAAQc,GAAG,CAACL,IAAJ,GAAW,IAAX,GAAkBE,GAAnB,IAA2BI,WAA3B,IAA0CC,UAAjD;AACH,KALM,CAAP;AAMH;AAIA;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,WAASE,cAAT,GAA0B;AACtB,WAAOvB,IAAI,CAACkB,MAAL,CAAaC,GAAG,IAAI;AACvB,YAAMC,WAAW,GAAGlB,OAAO,CAACE,KAAR,GAAgBe,GAAG,CAACf,KAAJ,KAAcF,OAAO,CAACE,KAAtC,GAA8C,CAACF,OAAO,CAACE,KAA3E;AACA,YAAMiB,UAAU,GAAInB,OAAO,CAACG,IAAR,GAAgBc,GAAG,CAACd,IAAJ,KAAaH,OAAO,CAACG,IAArC,GAA4C,CAACH,OAAO,CAACG,IAAzE;AAEA,aAAOe,WAAW,IAAIC,UAAtB;AACH,KALM,CAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,QAAMG,QAAQ,GAAG,MAAM;AAEnB,YAAOlB,MAAP;AACI,WAAK,UAAL;AACA,eAAOO,mBAAmB,EAA1B;;AAEA,WAAK,MAAL;AACA,eAAOS,eAAe,EAAtB;;AAEA;AACA,eAAOC,cAAc,EAArB;AARJ;AAUH,GAZD;AAeF;AACF;AACA;AACA;AACA;AACA;AACA;;;AAEI,QAAME,YAAY,GAAKrB,KAAF,IAAa;AAC9BG,IAAAA,SAAS,CAAEH,KAAF,CAAT;AACH,GAFD;;AAMA,QAAMsB,aAAa,GAAKP,GAAF,IAAW;AAC7BhB,IAAAA,UAAU,CAAEgB,GAAF,CAAV;AACH,GAFD;;AAKA,QAAMQ,KAAK,GAAG;AACVF,IAAAA,YADU;AAEVC,IAAAA,aAFU;AAGVb,IAAAA,mBAHU;AAIVS,IAAAA,eAJU;AAKVE,IAAAA,QALU;AAMVtB,IAAAA,OANU;AAOVI,IAAAA,MAPU;AAQVN,IAAAA,IARU;AASVF,IAAAA;AATU,GAAd;AAaA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAK6B,KAAjC;AAAA,cACM9B;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IAhKQD,a;;KAAAA,a;AAkKT,eAAeA,aAAf","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\n\nconst StoreContext = React.createContext();\n\nexport const useStore = () => useContext( StoreContext );\n\n\n\nfunction StoreProvider({ children }) {\n    \n    const [ user, setUser ] = useState({});\n    const [ ride, setRide ] = useState([]); \n    const [ filters, setFilters ] = useState({ state:\"\", city: \"\" });\n    const [ status, setStatus ] = useState(\"\"); // upcoming, past\n\n\n    // Fetching Date\n    useEffect(() => {\n\n        (async function() {\n            await fetch('/Data.json')\n            .then( response => response.json() )\n            .then(res => {\n                setUser( res.user );\n                setRide( res.ride );\n\n            });\n\n\n        })()\n\n\n    }, [ setUser, setRide ]);\n\n    //////////////////////////////////\n    //////////////////////////////////\n    ////////// Hnadle Rides //////////\n    /////////////////////////////////\n    ////////////////////////////////\n\n\n    /**\n     * handle up coming rides\n     * //////////////////////\n     * \n     * selecting all up coming rides\n     * apply the Filter by:\n     *  --- state\n     *  --- city\n     */\n\n    function selectUpcomingRides() {\n        const date = new Date();\n        const now = date.getTime();\n        \n        return ride.filter( obj => {\n            const filterState = filters.state ? obj.state === filters.state : !filters.state;\n            const filterCity  = filters.city  ? obj.city === filters.city : !filters.city;\n    \n            return (obj.date * 1000 >= now) && filterState && filterCity\n        });\n    }\n\n\n     /**\n     * handle past rides\n     * //////////////////////\n     * \n     * selecting all past rides\n     * apply the Filter by:\n     *  --- state\n     *  --- city\n     */\n    function selectPastRides() {\n        const date = new Date();\n        const now = date.getTime();\n        \n        return ride.filter( obj => {\n            const filterState = filters.state ? obj.state === filters.state : !filters.state;\n            const filterCity  = filters.city  ? obj.city === filters.city : !filters.city;\n    \n            return (obj.date * 1000 < now) && filterState && filterCity\n        });\n    }\n\n\n    \n     /**\n     * handling ( All Rides )\n     * //////////////////////\n     * \n     * Selecting All rides\n     * Apply the Filter by:\n     *  --- state\n     *  --- city\n     */\n\n    function selectAllRides() {\n        return ride.filter( obj => {\n            const filterState = filters.state ? obj.state === filters.state : !filters.state;\n            const filterCity  = filters.city  ? obj.city === filters.city : !filters.city;\n    \n            return filterState && filterCity\n        });\n    }\n\n    /**\n     * handling rides\n     * //////////////////////\n     * \n     * return Ride by selected ( status ) // upcoming, past and \"\" ( for all rides )  \n     * Apply the Filter by:\n     *  --- state\n     *  --- city\n     */\n\n    const getRides = () => {\n\n        switch(status) {\n            case \"upcoming\": \n            return selectUpcomingRides();\n\n            case \"past\": \n            return selectPastRides();\n\n            default: \n            return selectAllRides();\n        }\n    }\n\n\n  /*\n        /////////////////////////////////////////////////////////////\n        /////////////////////////////////////////////////////////////\n        ////////// handling status State and Filter State //////////\n        /////////////////////////////////////////////////////////////\n        /////////////////////////////////////////////////////////////\n    */\n\n    const handleStatus = ( state ) => {\n        setStatus( state );\n    }\n\n\n\n    const handleFilters = ( obj ) => {\n        setFilters( obj );\n    } \n\n\n    const value = {\n        handleStatus,\n        handleFilters,\n        selectUpcomingRides,\n        selectPastRides,\n        getRides,\n        filters,\n        status,\n        ride,\n        user,\n    };\n\n\n    return (\n        <StoreContext.Provider value = { value } >\n            { children }\n        </StoreContext.Provider>\n    )\n}\n\nexport default StoreProvider;"]},"metadata":{},"sourceType":"module"}